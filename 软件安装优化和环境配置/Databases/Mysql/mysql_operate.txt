1 mysql 创建用户的三种方式        mysqld  --initialize-insecure  #初始化msyql

CREATE USER user[IDENTIFIED BY [PASSWORD] 'password'],
[user[IDENTIFIED BY [PASSWORD] 'password']]...

INSERT INTO mysql.user(Host,User,Password,ssl_cipher,x509_issuer,x509_subject) VALUES('%','newuser1',PASSWORD('123456'),'','','')

FLUSH PRIVILEGES

GRANT priv_type ON database.table
TO user[IDENTIFIED BY [PASSWORD] 'password']
[,user [IDENTIFIED BY [PASSWORD] 'password']...]

set sql_mode =‘STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION‘;

skip-grant-tables

2删除用户
DROP USER user[,user]...

DROP USER 'newuser1'@'%

DELETE FROM mysql.user WHERE Host = '%' AND User = 'admin'
3 修改密码
mysqladmin -u -username -p password "new_password"

修改USER表
UPDATE user SET Password = PASSWORD('123') WHERE USER = 'myuser'  5.7后没有password 字段


SET语句修改
SET PASSWORD = PASSWORD("123");

修改其他用户密码：
SET PASSWORD FOR 'myuser'@'%'=PASSWORD("123456")

GRANT SELECT ON *.* TO 'test3'@'%' IDENTIFIED BY '123'

4 忘记密码的解决方案
mysqld --skip-grant-tables
mysqld-nt --skip-grant-tables
net start mysql --skip-grant-tables

查询数据库大小
select TABLE_SCHEMA, concat(truncate(sum(data_length)/1024/1024,2),' MB') as data_size,
concat(truncate(sum(index_length)/1024/1024,2),'MB') as index_size
from information_schema.tables
group by TABLE_SCHEMA
order by data_length desc;

binlog-ignore-db=xxxx  #忽略同步库
binlog-do-db=xxx  #需要同同步的库不在内不同步
replicate-wild-do-table=db_name.%  #只复制到那个库的那个表
replicate-wild-ignore-table=mysql.% #忽略哪个库到那个表

slave主从
CHANGE MASTER TO
MASTER_HOST='1.1.1.1',
MASTER_PORT=3306,
MASTER_USER='slave',
MASTER_PASSWORD='123456',
MASTER_LOG_FILE='mysql-bin.00001',
MASTER_LOG_POS=1111;


log_timestamps = SYSTEM
grant replication slave on *.* to 'rep1'@'%' identified by 'mysql';

xtrabackup  mysqldump  innobackupex  区别？
--single-transaction  #innodb可以不锁表  其他引擎不确定

从二进制文件查询 事件语句
mysqlbinlog --base64-output=decode-rows -vv bin_file|grep -A 20 'pos_num'

从二进制文件中恢复数据
mysqlbinlog /xxx/xxx/logbin.xxxxx --stop-pos=xxxxx |mysql -uroot -p

定位效率低的查询：
show processlist\G  或 show full processlist; 
对于查询时间长、运行状态（State 列）是“Sending data”、“Copying to tmp table”、
“Copying to tmp table on disk”、“Sorting result”、“Using filesort”等都可能是有性能问题的查询（SQL）


事务处理  将步骤打包成一件事情来做， 失败一步 数据将回滚之前状态


1、恢复到指定数据库
mysql -hhostname -uusername -ppassword databasename < backupfile.sql

2、还原压缩的MySQL数据备份文件
gunzip < backupfile.sql.gz | mysql -uusername -ppassword databasename

3、直接将备份导入到新的数据库
mysqldump -uusername -ppassword databasename | mysql -host=192.168.1.101 -C databasename

4、使用source导入sql文件
mysql > use cmdb


mysql > source /data/cmdb_backup.sql



mysql-bin和relay-bin 清除
确认文件没用
reset master;
or
reset slave;


mysql Table 'xxxxx' is marked as crashed and should be repaired  修复

1、mysqlcheck -r 数据库名 表名 -uroot -p

命令格式
Usage: mysqlcheck [OPTIONS] database [tables] 
OR mysqlcheck [OPTIONS] –databases DB1 [DB2 DB3…] 
OR mysqlcheck [OPTIONS] –all-databases
参数
A, –all-databases —选择所有的库 
-a, –analyze —分析表 
-B, –databases —选择多个库 
-c, –check —检查表 
-o, –optimize —-优化表 
-C, –check-only-changed —最后一次检查之后变动的表 
–auto-repair —-自动修复表 
-g, –check-upgrade —检查表是否有版本变更，可用 auto-repair修复 
-F, –fast —只检查没有正常关闭的表 
-f, –force —忽悠错误，强制执行 
-e, –extended —表的百分百完全检查，速度缓慢 
-m, –medium-check —近似完全检查，速度比 –extended稍快 
-q, –quick —最快的检查方式，在repair 时使用该选项，则只会修复 index tree 
-r, –repair —修复表 
-s, –silent —只打印错误信息 
-V, –version —显示版本


2、myisamchk
使用myisamchk必须暂时停止MySQL服务器。例如，我们要检修test数据库。执行以下操作：

# service mysqld stop ;
# myisamchk -r /var/lib/mysql/test/*MYI
# service mysqld start;
myisamchk会自动检查并修复数据表中的索引错误。


MySQL防误删插件Recycle_bin






