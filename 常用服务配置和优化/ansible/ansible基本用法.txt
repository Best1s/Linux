Chef  		#Ruby语言编写 C/S架构  Recipe脚本编写规范
Saltstack	#C/S架构,YAML脚本编写规范，适合大规模集群部署
Ansible		# Playbook脚本编写规范

ansible yum 安装会于现有python项目模块可能产生冲突
		源码安装 在独立吃python venv中   
		git地址：https://github.com/ansible/ansible.git
1：预先安装Python3.6
2: 安装virtualenv    #pip install virtualenv
3: 创建ansible账户并安装python3.6版本virtualenv实例
	#useradd deploy && su - deploy
	# virtualenv -p /usr/local/bin/python3 .xxx-env
	#ansible 源码依赖包  cryptography PyYAML jinja2 可用pip安装

#在/etc/ansible/host 下先把组名 客户端配置好
#ansible密码登录         
密码需要保存在文件内不安全 
/etc/ansible/host文件添加
[组名]   不用[]是机器名  支持主机列表正则匹配
ip [ansible_ssh_port=port][ansible_ssh_user=user] [ansible_ssh_pass=passwd]
/etc/ansible/ansible.cfg 更改参数
host_key_checking = False

#ansible免密登录
配置免密登录
ssh-kengen -t rsa
ssh-copy-id 需要免登录的IP

#
#ansible基本用法
ansible xxxx -m ping   操作xxxx组  all为hosts文件中所有主机 -m指定 ping模块

ansible Client -m ping     # 操作 Client 组 ( all 为操作 hosts 文件中所有主机 )，
192.168.12.129 | SUCCESS => {
"changed": false, 
"ping": "pong"
}

# -i          指定 hosts 文件位置
# -u username 指定 SSH 连接的用户名
# -k          指定远程用户密码
# -f          指定并发数
# -s          如需要 root 权限执行时使用 ( 连接用户不是 root 时 )
# -K          -s 时，-K 输入 root 密码

远程命令模块（ command / script / shell ）  command不支持管道

ansible xxxx -m script -a "/xxx/xx.sh"    -a 指定模块参数
ansible xxxx -m command -a "free -h"

#shell模块 的功能是执行远程主机上的 shell 脚本文件，支持管道符。
ansible Client -m shell -a "/home/test.sh"           # 执行远程脚本 命令等，支持管道

#script模块
ansible Client -m script -a "/home/test.sh 12 34"    # 远程执行本地脚本

#copy模块
# 向 Client 组中主机拷贝 test.sh 到 /tmp 下，属主、组为 root ，权限为 0755
ansible Client -m copy -a "src=/home/test.sh dest=/tmp/ owner=root group=root mode=0755" 

#stat 模块（获取远程文件状态信息，atime/ctime/mtime/md5/uid/gid 等信息）
ansible Client -m stat -a "path=/etc/syctl.conf"

#yum 模块（软件包管理） name为必须参数
#state参数：用于指定软件包的状态 ，默认值为。present，表示确保软件包已经安装，
#除了。present，其他可用值有 installed、latest、absent、removed，
#其中 installed 与present 等效，latest 表示安装 yum 中最新的版本，absent 和 removed 等效，表示删除对应的软件包。

ansible Client -m yum -a "name=curl state=latest"

#cron 模块（远程主机 crontab 配置）
ansible Client -m cron -a "name='check dirs' minute=0 hour='5,2' day='*/5' job='ls -alh > /dev/null'"
 
#service 模块（远程主机系统服务管理）
ansible Client -m service -a "name=nginx state=stopped"
ansible Client -m service -a "name=nginx state=restarted"
ansible Client -m service -a "name=nginx state=reloaded"

#user 服务模块（远程主机用户管理）
ansible Client -m user -a "name=wang comment='user wang'"
ansible Client -m user -a "name=wang state=absent remove=yes"    # 添加删除用户

#
 
#get_url 模块（实现在远程主机下载指定 URL 到本地，支持 sha256sum 文件校验）
ansible Client -m get_url -a "url=http://www.baidu.com dest=/tmp/index.html mode=0440 force=yes"

#


#file模块 可以帮助我们完成一些对文件的基本操作。比如，创建文件或目录、删除文件或目录、修改文件权限等。
#主机上创建一个名为 testfile1 的文件，如果 testfile1 文件已经存在，则会更新文件的时间戳
ansible Client -m file -a "path=/testdir/testfile1 state=touch"  

#主机上创建一个名为 /testdir/testdir 的目录，如果 /testdir/testdir 目录已经存在，则不进行任何操作。
ansible ansible-demo3 -m file -a "path=/testdir/testdir state=directory"

# 创建软链接，硬链接  
"path=/testdir/linkfile1 state=link src=/testdir/testfile1"
“path=/testdir/hardfile2 state=hard src=/testdir/testfile2"

#如果源文件不存在，或者链接文件与其他文件同名时  可加force 参数
"path=/testdir/linkfile3 state=link src=/testdir/sourcefile force=yes"

#删除远程机器上的指定文件或目录。
"path=/testdir/testdir state=absent"



#replace模块可以根据我们指定的正则表达式替换文件中的字符串，文件中所有被匹配到的字符串都会被替换。
path参数 ：必须参数，指定要操作的文件，

regexp参数 : 必须参数，指定一个 python 正则表达式，文件中与正则匹配的字符串将会被替换。

replace参数 ： 指定最终要替换成的字符串。

backup参数 ：是否在修改文件之前对文件进行备份，最好设置为yes

#主机中的 /testdir/test 文件中的所有 ABC 替换成 abc。  backup=yes 操作文件之前进行备份。
path=/testdir/test regexp="ABC" replace=abc'


#lineinfile确保”某一行文本”存在于指定的文件中，或者确保从文件中删除指定的”文本”,还可以根据正则表达式，替换”某一行文本”。
path参数 ：必须参数，指定要操作的文件。

line参数 : 使用此参数指定文本内容。

regexp参数 ：使用正则表达式匹配对应的行，当替换文本时，如果有多行文本都能被匹配，
则只有最后面被匹配到的那行文本才会被替换，当删除文本时，如果有多行文本都能被匹配，这么这些行都会被删除。

state参数：当想要删除对应的文本时，需要将state参数的值设置为absent，absent为缺席之意，表示删除，state的默认值为present。

backrefs参数：默认情况下，当根据正则替换文本时，即使regexp参数中的正则存在分组，
在line参数中也不能对正则中的分组进行引用，除非将backrefs参数的值设置为yes。
backrefs=yes表示开启后向引用，这样，line参数中就能对regexp参数中的分组进行后向引用了

insertbefore参数：借助insertbefore参数可以将文本插入到“指定的行”之前，
insertbefore参数的值可以设置为BOF或者正则表达式，BOF为Begin Of File之意，
表示插入到文档的开头，如果将insertbefore的值设置为正则表达式，表示将文本插入到匹配到正则的行之前，
如果正则没有匹配到任何行，则插入到文件末尾，当使用backrefs参数时，此参数会被忽略。

backup参数：是否在修改文件之前对文件进行备份。

create参数 ：当要操作的文件并不存在时，是否创建对应的文件.

#确保指定的”一行文本”存在于文件中         
'path=/testdir/test line="test lineinfile" '

#regexp=""根据正则表达式替换”某一行”如果不止一行能够匹配正则，
#那么只有最后一个匹配正则的行才会被替换，被匹配行会被替换成 line 参数指定的内容
'path=/testdir/test regexp="^line" line="test lineinfile" '




#template模块











